<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
		">
	<!-- http://www.springframework.org/schema/beans/spring-beans.xsd -->
	<!-- http://www.springframework.org/schema/context/spring-context.xsd -->

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->
	<!-- <beans:bean id="jsonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" 
		/> <beans:bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> 
		<beans:property name="messageConverters"> <beans:list> <beans:ref bean="jsonHttpMessageConverter" 
		/> </beans:list> </beans:property> </beans:bean> -->

<!-- bootstrap -->
	<resources mapping="/js/**" location="/bootstrap/js/" />
	<resources mapping="/fonts/**" location="/bootstrap/fonts/" />
	<resources mapping="/css/**" location="/bootstrap/css/" />

	<!-- foundation -->
	<resources mapping="/js/**" location="/foundation/js/" />
	<resources mapping="/css/**" location="/foundation/css/" />

	<!-- ink -->
	<resources mapping="/css/**" location="/ink/css/" />
	<resources mapping="/js/**" location="/ink/js/" />

	<!-- common -->
	<resources mapping="/js/**" location="/common/js/" />
	<resources mapping="/css/**" location="/common/css/" />

	<!-- etc -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/js/**" location="/js/" />
	<resources mapping="/css/**" location="/css/" />
	


	<!-- <beans:bean id="jacksonMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" 
		/> -->
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- <mvc:annotation-driven /> -->

	<mvc:annotation-driven>
		<mvc:argument-resolvers>
			<beans:bean class="common.common.CustomMapArgumentResolver"></beans:bean>
		</mvc:argument-resolvers>
	</mvc:annotation-driven>

	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<beans:bean id="loggerInterceptor" class="common.common.LoggerInterceptor"></beans:bean>
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->





	<!-- <beans:bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" 
		/> -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->

	<!-- 서블릿 생성시 기본 -->
	<!-- 웹 어플리케이션의 WAR 파일 내에 포함된 뷰 템플릿을 찾는다. 뷰 템플릿의 경로는 논리적 뷰 이름에 접두어와 접미어를 
		붙여 구성 -->
	<!-- 주의할 점은 InternalResourceViewResolver는 마지막 우선 순위를 갖도록 지정해야 함 <= InternalResourceViewResolver는 
		항상 뷰 이름에 매핑되는 뷰 객체를 리턴하기 때문에 null을 리턴하지 않음. 따라서 InternalResourceViewResolver의 
		우선순위가 높을 경우 우선순위가 낮은 ViewResolver는 사용되지 않게 됨. -->
	<beans:bean id="jsonView"
		class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
	</beans:bean>
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
	</beans:bean>
<!-- 		<beans:property name="order" value="0" /> -->
	<beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver"
		p:viewClass="org.springframework.web.servlet.view.JstlView">
		<beans:property name="prefix" value="/WEB-INF/sample/jsp/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<!-- <beans:property name="order" value="1" /> -->
	<!-- 작동 안함... 대체 왜..?? -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/sample/jsp/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<!-- <beans:property name="order" value="9" /> -->

	<!-- ViewResolver의 구현체로 특별한 맵핑 정보 없이 view 이름을 URL로 사용 View 이름과 실제 view 자원과의 
		이름이 같을 때 사용할 수 있다. 참고적으로 JSTL을 사용하려면 위의 viewClass를 정의해주면 된다. -->



	<!-- <beans:bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver"> 
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView" 
		/> <beans:property name="order" value="2" /> </beans:bean> -->


	<!-- 제이슨 -->

	<!-- <beans:bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" 
		/> <beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver" 
		p:order="0" /> <beans:bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" 
		/> -->
	<!-- 서블릿 뷰 종류 http://isstory83.tistory.com/117 -->

	<!-- common 안에 있는 모든 자바파일의 어노테이션을 검색해서 빈으로 등록 -->
	<!-- @Required(RequiedAnnotationBeanPostProcessor) @Autowired(AutowiredAnnotationBeanPostProcessor) 
		@Resource @PostConstruct @PreDestory(CommonAnnotationBeanPostProcessor) @Configuration(ConfigurationClassPostProcessor) 
		@Repository @Service @Controller -->
	<context:component-scan base-package="sample" />
	<!-- <context:component-scan base-package="common" /> -->


</beans:beans>
